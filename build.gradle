/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.1.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    compile("org.junit.jupiter:junit-jupiter-api:5.3.2")

    testCompile("org.junit.jupiter:junit-jupiter-migrationsupport:5.3.2")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.3.2")

    testCompile("org.junit.platform:junit-platform-runner:1.3.2")
    testCompile("org.junit.platform:junit-platform-console-standalone:1.3.2")
    testCompile("org.junit.platform:junit-platform-launcher:1.3.2")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.3.2")
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task consoleLauncherTest(type: JavaExec) {
    dependsOn testClasses
    def reportsDir = file("$buildDir/test-results")
    outputs.dir reportsDir
    classpath sourceSets.test.runtimeClasspath
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-classpath'
    args '--details', 'tree'
    args '--reports-dir', reportsDir
}

test {
    useJUnitPlatform()

    // Uncomment to allow ConsoleLauncher
    dependsOn consoleLauncherTest

    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Define the main class for the application
mainClassName = 'junit5.App'
